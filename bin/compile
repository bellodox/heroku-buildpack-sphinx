#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

# config
APACHE_VERSION="2.2.19"
APACHE_PATH="apache"
PHP_VERSION="5.3.6"
PHP_PATH="php"
LP_DIR=`cd $(dirname $0); cd ..; pwd`

BIN_DIR=$(cd $(dirname $0); pwd) # absolute path
ROOT_DIR=$(dirname $BIN_DIR)
BUILD_DIR=$1
CACHE_DIR=$2

NAME=$($BIN_DIR/detect $BUILD_DIR)
PIP_DOWNLOAD_CACHE=${PIP_DOWNLOAD_CACHE:-$CACHE_DIR/pip_downloads}
VIRTUALENV_DIRS="bin include lib"
VENDORED_MEMCACHED="http://cl.ly/0a191R3K160t1w1P0N25/vendor-libmemcached.tar.gz"

indent() {
  RE="s/^/       /"
  [ $(uname) == "Darwin" ] && sed -l "$RE" || sed -u "$RE"
}

virtualenv() {
  python - "$@" <<EOF
import sys
sys.path.insert(0, "$ROOT_DIR/src/virtualenv-1.6.4")
import virtualenv
virtualenv.main()
EOF
}

cd $BUILD_DIR

# reject a non-packaged Django app
if [ "$NAME" = "Python" ]; then
  [ -f manage.py ] && [ -f settings.py ] && { echo " !     Django app must be in a package subdirectory"; exit 1; }
fi

# warn a checked-in virtualenv
if [ -d "lib" ] || [ -d "bin" ]; then
  echo " !     You have a virtualenv checked in. You should ignore the appropriate paths in your repo. See http://devcenter.heroku.com/articles/gitignore for more info.";
fi

# reject a conflicting checked-in virtualenv
if [ -f "lib/python2.7" ]; then
  echo " !     Checked-in virtualenv conflict."
  exit 1;
fi


# copy artifacts out of cache if exists
mkdir -p $CACHE_DIR
for dir in $VIRTUALENV_DIRS; do
  cp -R $CACHE_DIR/$dir . &> /dev/null || true
done

echo "-----> Preparing virtualenv version $(virtualenv --version)"
virtualenv --no-site-packages . | indent

# unpack cache
for DIR in $APACHE_PATH $PHP_PATH ; do
  rm -rf $DIR
  if [ -d $CACHE_DIR/$DIR ]; then
    cp -r $CACHE_DIR/$DIR $DIR
  fi
done

# install apache if needed
if [ ! -d $APACHE_PATH ]; then
  APACHE_URL="https://s3.amazonaws.com/php-lp/apache-$APACHE_VERSION.tar.gz"
  echo "-----> Bundling Apache v$APACHE_VERSION"
  curl --silent --max-time 60 --location $APACHE_URL | tar xz
fi

# update config files
cp $LP_DIR/conf/httpd.conf $APACHE_PATH/conf

cat >>boot.sh <<EOF
sed -i 's/Listen 80/Listen '\$PORT'/' /app/apache/conf/httpd.conf
for var in \`env|cut -f1 -d=\`; do
  echo "PassEnv \$var" >> /app/apache/conf/httpd.conf;
done
touch /app/apache/logs/error_log
touch /app/apache/logs/access_log
tail -F /app/apache/logs/error_log &
tail -F /app/apache/logs/access_log &
export LD_LIBRARY_PATH=/app/php/ext
export PHP_INI_SCAN_DIR=/app/www
echo "Launching apache"
exec /app/apache/bin/httpd -DNO_DETACH
EOF

chmod +x boot.sh

# create set-aside .heroku folder.
mkdir .heroku

# if pylibmc within requirements, use vendored libmemcached
if (grep -Fxiq "pylibmc" requirements.txt) || (grep -Fiq "pylibmc=" requirements.txt)
then
    echo "-----> Noticed pylibmc. Bootstrapping libmemcached."
    cd .heroku

    if [ -d "vendor/lib/sasl2" ]; then
      export LIBMEMCACHED=$(pwd)/vendor
    else
      curl -s -L -O $VENDORED_MEMCACHED
      tar -zxvf vendor-libmemcached.tar.gz > /dev/null
      rm vendor-libmemcached.tar.gz
      export LIBMEMCACHED=$(pwd)/vendor
    fi

    export LIBMEMCACHED=$(pwd)/vendor
    cd ..
fi

if (grep -Fiq "hg+" requirements.txt) then
  PIP_DOWNLOAD_CACHE=$PIP_DOWNLOAD_CACHE bin/pip install --use-mirrors mercurial | indent
fi

source bin/activate
pip install sphinx
CONF_FILE=$(find . -name 'conf.py' | head -1)
PROJECT=$(dirname $CONF_FILE)
pushd $PROJECT
make html
popd

cp $ROOT_DIR/src/mod_authn_google.so $APACHE_PATH/modules/

mkdir -p $CACHE_DIR/www
cp -R $PROJECT/_build/html/* $CACHE_DIR/www/
mv $CACHE_DIR/www . 


echo "-----> Installing dependencies using pip version $(bin/pip --version | awk '{print $2}')"
PIP_DOWNLOAD_CACHE=$PIP_DOWNLOAD_CACHE bin/pip install --use-mirrors -r requirements.txt | indent

set +e
OUT=$(virtualenv --relocatable .)
[ $? -ne 0 ] && {
  echo " !     Error making virtualenv relocatable"
  echo "$OUT" | indent
  exit 1
}
set -e

# repack cache
mkdir -p $CACHE_DIR
for DIR in $APACHE_PATH ; do
  rm -rf $CACHE_DIR/$DIR
  cp -R $DIR $CACHE_DIR/$DIR
done